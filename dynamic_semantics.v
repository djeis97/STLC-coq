Require Import Coq.Strings.String.
Require Import Coq.Lists.List.
Require Import Coq.Lists.ListSet.
Require Import MyBase.
Require Import lang.
Require Import hoas.
Require Import static_semantics.
Set Implicit Arguments.
Import ListNotations.
Definition expr_dec : forall e1 e2 : ùîº, {e1 = e2} + {e1 <> e2}.
decide equality.
- apply string_dec.
- decide equality.
- decide equality.
- apply string_dec.
- apply string_dec.
Qed.

Reserved Notation "a ‚•õ b" (at level 1, no associativity).
Reserved Notation "a ‚•õŒ≤ b" (at level 1, no associativity).

Inductive SmallStepsBeta : ùîº -> ùîº -> Prop :=
| ASSŒ≤ n1 n2 : ((NatExpr n1) + (NatExpr n2)) ‚•õŒ≤ (NatExpr (n1 + n2))
| PSSŒ≤ f x œÑ body {e} (v : ùïç e) {body' body''}
       (CASx : [ e / x ] body = body')
       (CASf : [ (AbsExpr f x œÑ body) / f ] body' = body'')
  : (AppExpr (AbsExpr f x œÑ body) e) ‚•õŒ≤ body''
where "a ‚•õŒ≤ b" := (SmallStepsBeta a b).

Inductive SmallSteps : ùîº -> ùîº -> Prop :=
| ECSS {E e1 e1' e2 e2'}
       (fillse1 : EvaluationContextFillsTo E e1 e1')
       (fillse2 : EvaluationContextFillsTo E e2 e2')
       (betaStep : e1 ‚•õŒ≤ e2)
  : e1' ‚•õ e2'
where "a ‚•õ b" := (SmallSteps a b).

Reserved Notation "a ‚•õ* b" (at level 1, no associativity).

Inductive BigSteps : ùîº -> ùîº -> Prop :=
| RBS {e} : e ‚•õ* e
| SBS {e e' e''} (ess : e ‚•õ e') (e'bs : e' ‚•õ* e'') : e ‚•õ* e''
where "a ‚•õ* b" := (BigSteps a b).