Require Import List.
Require Import ListSet.
Require Import String.
Require Import Basics.
Require Import MyBase.
Require Import lang.
Import ListNotations.

Reserved Notation "a '‚ààf' b" (at level 1, no associativity).
Reserved Notation "a '‚àâf' b" (at level 1, no associativity).
Reserved Notation "a '‚ààb' b" (at level 1, no associativity).

Inductive NotInFV : string -> ùîº -> Prop :=
| NotFVVarExpr {s1 s2} (neq : s1 <> s2) : s1 ‚àâf s2
| NotFVNatExpr {s} {n : nat} : s ‚àâf n
| NotFVAddExpr {s e1 e2} (notInLeft : s ‚àâf e1) (notInRight : s ‚àâf e2) : s ‚àâf (e1 + e2)
| NotFVAppExpr {s e1 e2} (notInLeft : s ‚àâf e1) (notInRight : s ‚àâf e2) : s ‚àâf (AppExpr e1 e2)
| NotFVAbsExpru f x œÑ body {s} (notF : f <> s) (notX : x <> s) (notInBody : s ‚àâf body) : s ‚àâf (AbsExpr f x œÑ body)
| NotFVAbsExprx f x œÑ body : x ‚àâf (AbsExpr f x œÑ body)
| NotFVAbsExprf f x œÑ body : f ‚àâf (AbsExpr f x œÑ body)
where "s ‚àâf e" := (NotInFV s e) : FV_scope.

Inductive InFV : string -> ùîº -> Prop :=
| FVVarExpr {s} : s ‚ààf s
| FVAddExprL {s e1 e2} (inSub: s ‚ààf e1) : s ‚ààf (e1 + e2)
| FVAddExprR {s e1 e2} (inSub: s ‚ààf e2) : s ‚ààf (e1 + e2)
| FVAbsExpr {f x œÑ body s} (notF : f <> s) (notX : x <> s) (inSub : s ‚ààf body) : s ‚ààf (AbsExpr f x œÑ body)
| FVAppExprL {s e1 e2} (inSub: s ‚ààf e1) : s ‚ààf (AppExpr e1 e2)
| FVAppExprR {s e1 e2} (inSub: s ‚ààf e2) : s ‚ààf (AppExpr e1 e2)
where "s ‚ààf e" := (InFV s e) : FV_scope.

Open Scope FV_scope.

Lemma InFVExclusive {s e} : s ‚ààf e -> s ‚àâf e -> False.
  induction e.
  all: intros ine notine; inversion ine; inversion notine; done.
Qed.

Lemma InFVOptions s e : s ‚ààf e \/ s ‚àâf e.
Proof with done.
  induction e.
  - destruct (string_dec s x)...
  - done.
  - decompose [or] IHe1; decompose [or] IHe2...
  - decompose [or] IHe; destruct (string_dec f s); destruct (string_dec x s)...
  - decompose [or] IHe1; decompose [or] IHe2...
Qed.

Inductive InBV : string -> ùîº -> Prop :=
| BVFName {f x œÑ body} : f ‚ààb (AbsExpr f x œÑ body)
| BVArg {f x œÑ body} : x ‚ààb (AbsExpr f x œÑ body)
| BVAddExprL {s e1 e2} (inSub: s ‚ààb e1) : s ‚ààb (e1 + e2)
| BVAddExprR {s e1 e2} (inSub: s ‚ààb e2) : s ‚ààb (e1 + e2)
| BVAppExprL {s e1 e2} (inSub: s ‚ààb e1) : s ‚ààb (AppExpr e1 e2)
| BVAppExprR {s e1 e2} (inSub: s ‚ààb e2) : s ‚ààb (AppExpr e1 e2)
where "x ‚ààb e" := (InBV x e).

Reserved Notation "[ a / s ] b = c" (at level 1, no associativity,
                                     a at next level, s at next level,
                                     b at next level, c at next level).

Inductive CAS : ùîº -> string -> ùîº -> ùîº -> Prop :=
| VarCASeq {s1 s2 e} (eq : s1 = s2) : [e / s1] s2 = e
| VarCASneq {s1 s2 e} (neq : s1 <> s2) : [e / s1] s2 = s2
| NatCAS {e s} (n : nat) : [e / s] n = n
| AddCAS {e s e1 e1' e2 e2'}
          (LeftAddCAS : [e / s] e1 = e1')
          (RightAddCAS : [e / s] e2 = e2')
  : [e / s] (e1 + e2) = (e1' + e2')
| AppCAS {e s e1 e1' e2 e2'}
          (LeftAppCAS : [e / s] e1 = e1')
          (RightAppCAS : [e / s] e2 = e2')
  : [e / s] (AppExpr e1 e2) = (AppExpr e1' e2')
| AbsCASUnbound {e s f x œÑ body body'}
                (notF : s <> f)
                (notX : s <> x)
                (fNotIn : f ‚àâf e)
                (xNotIn : x ‚àâf e)
                (bodyCAS : [e / s] body = body')
  : [e / s] (AbsExpr f x œÑ body) = (AbsExpr f x œÑ body')
| AbsCASF {e f x œÑ body} : [e / f] (AbsExpr f x œÑ body) = (AbsExpr f x œÑ body)
| AbsCASX {e f x œÑ body} : [e / x] (AbsExpr f x œÑ body) = (AbsExpr f x œÑ body)
where "[ a / s ] b = c" := (CAS a s b c).

Inductive SafeToSubInto (e : ùîº) : ùîº -> Prop :=
| SafeToSubIntoVarExpr {s : string} : SafeToSubInto e s
| SafeToSubIntoNatExpr {n : nat} : SafeToSubInto e n
| SafeToSubIntoAddExpr (e0 e1 : ùîº)
                       (safe1 : SafeToSubInto e e0)
                       (safe2 : SafeToSubInto e e1)
  : SafeToSubInto e (e0 + e1)
| SafeToSubIntoAppExpr (e0 e1 : ùîº)
                       (safe1 : SafeToSubInto e e0)
                       (safe2 : SafeToSubInto e e1)
  : SafeToSubInto e (AppExpr e0 e1)
| SafeToSubIntoAbExpr {f x œÑ body}
                      (notFIn : f ‚àâf e)
                      (notXIn : x ‚àâf e)
                      (safe : SafeToSubInto e body)
  : SafeToSubInto e (AbsExpr f x œÑ body).

Axiom AlwaysSafeToSubInto : forall e1 e2, SafeToSubInto e1 e2.

Lemma CASAlways {e1 x e} : SafeToSubInto e1 e -> exists e2, [e1 / x] e = e2.
  intros H.
  induction e.
  - destruct (string_dec x x0) as [-> | neq].
    + exists e1; done.
    + exists x0; done.
  - exists n; done.
  - inversion H.
    destruct (IHe1 safe1).
    destruct (IHe2 safe2).
    exists (AddExpr x0 x1).
    done.
  - inversion H.
    destruct (IHe safe).
    destruct (string_dec x f) as [-> | nef].
    + exists (AbsExpr f x0 œÑ e).
      done.
    + destruct (string_dec x x0) as [-> | nex0].
      * exists (AbsExpr f x0 œÑ e).
        done.
      * exists (AbsExpr f x0 œÑ x2).
        done.
  - inversion H.
    destruct (IHe1 safe1).
    destruct (IHe2 safe2).
    exists (AppExpr x0 x1).
    done.
Qed.

Definition substitution_list := list (ùîº * string).

Definition sub_dec (sub1 sub2 : (ùîº * string)) : ({sub1 = sub2} + {sub1 <> sub2}).
Proof.
  decide equality.
  - apply string_dec.
  - decide equality.
    + apply string_dec.
    + decide equality.
    + decide equality.
    + apply string_dec.
    + apply string_dec.
Qed.

Inductive MultiCAS : substitution_list -> ùîº -> ùîº -> Prop :=
| MultiCASNull {e} : MultiCAS nil e e
| MultiCASCons {e s subs e' e'' e'''}
                (MultiCASe'' : (MultiCAS subs e' e''))
                (CASe' : (CAS e s e'' e'''))
  : MultiCAS ((e,s)::subs) e' e'''.

Reserved Notation "a '‚â°Œ±' b" (at level 1, no associativity).

Inductive AlphaEquiv : ùîº -> ùîº -> Prop :=
| RAE {e} : e ‚â°Œ± e 
| AAE {a b c d}
      (AEQac : a ‚â°Œ± c)
      (AEQbd : b ‚â°Œ± d)
  : (a + b) ‚â°Œ± (c + d)
| PAE {a b c d}
      (AEQac : a ‚â°Œ± c)
      (AEQbd : b ‚â°Œ± d)
  : (AppExpr a b) ‚â°Œ± (AppExpr c d)
| BAE {f f1 f2 x x1 x2 œÑ body1 body1' body2 body2'}
      (FXDiff : f <> x)
      (FFresh1 : f ‚àâf body1)
      (FFresh2 : f ‚àâf body2)
      (XFresh1 : x ‚àâf body1)
      (XFresh2 : x ‚àâf body2)
      (FCAS1 : [f / f1] body1 = body1')
      (FCAS2 : [f / f2] body2 = body2')
      (AEQ12 : body1' ‚â°Œ± body2')
  : (AbsExpr f1 x1 œÑ body1) ‚â°Œ± (AbsExpr f2 x2 œÑ body2)
where "a ‚â°Œ± b" := (AlphaEquiv a b).

Theorem AlphaEquivSymm {e1 e2} : e1 ‚â°Œ± e2 -> e2 ‚â°Œ± e1.
  induction 1; done.
Qed.
